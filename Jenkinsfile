#!/usr/bin/env groovy


pipeline {
    agent any
	tools {
      nodejs 'nodejs8.9.4'
      git 'Default'
    }
    parameters {
        string(name: 'branch', defaultValue: 'master', description: 'Build branch name')
		
		string(name: 'cartridgepath', defaultValue: 'app_storefront_base:app_custom_core', description: 'Cartridges list which need to be built')
        
        string(name: 'hostname', defaultValue: 'aspire03-tech-prtnr-na03-dw.demandware.net', description: 'Instance Hostname')
        
        string(name: 'ocCredentialsId', defaultValue: 'ocapi-client-cred', description: 'Open Commerce API Credentials')
        
        string(name: 'ocVersion', defaultValue: 'v20_8', description: 'Open Commerce API Version')
        
        string(name: 'buildVersion', defaultValue: 'dev', description: 'Name of the code version that is being deployed. This will be added as a suffix to the one generated by the builder.')
        
        string(name: 'tempDirectory', defaultValue: 'tmp/code', description: 'Path (relative to the workspace) to a temp directory, that will be used during the build. If the directory does not exist, it will be created by the builder and it will also be automatically cleaned up before each build.')

        booleanParam(name: 'activateBuild', defaultValue: true, description: 'Activate Build')
        
        booleanParam(name: 'createBuildInfoCartridge', defaultValue: true, description: 'Create Build Info Cartridge')
        
        booleanParam(name: 'buildbasecartridges', defaultValue: true, description: 'Build SFCC cartridges ')
    }
    stages {
        stage('Cleanup') {
            steps {
                cleanWs()
            }
        }
        stage('Git') {
            steps {
                git(
                    branch: "${params.branch}",
                    url: 'https://github.com/dmk2861995/jenkins-overview.git'
                )
            }
        }
        stage('Build') {
            stages {
                stage('buildbase') {
                    steps {
                        script {
                            if(params.cartridgepath.contains('app_storefront_base')) {
                                dir('storefront-reference-architecture') {
                                    bat 'npm install'
                                    bat 'npm run compile:scss'
                                    bat 'npm run compile:js'
                                }
                            }
                        }  
                    }
                }
                stage('buildplugins') {
                    steps {
                        script {
                            if(params.cartridgepath.contains('plugin_productcompare')) {
                                dir('plugin_productcompare') {
                                    bat 'npm install'
                                    bat 'npm run compile:scss'
                                    bat 'npm run compile:js'
                                }
                            }
							if(params.cartridgepath.contains('plugin_applepay')) {
                                dir('plugin-applepay') {
                                    bat 'npm install'
                                    bat 'npm run compile:scss'
                                    bat 'npm run compile:js'
                                }
                            }
							if(params.cartridgepath.contains('plugin_instorepickup')) {
                                dir('plugin_instorepickup') {
                                    bat 'npm install'
                                    bat 'npm run compile:scss'
                                    bat 'npm run compile:js'
                                }
                            }
							if(params.cartridgepath.contains('lib_productlist')) {
                                dir('lib_productlist') {
                                    bat 'npm install'
                                }
                            }
							if(params.cartridgepath.contains('plugin_giftregistry')) {
                                dir('plugin_giftregistry') {
                                    bat 'npm install'
                                    bat 'npm run compile:scss'
                                    bat 'npm run compile:js'
                                }
                            }
							if(params.cartridgepath.contains('plugin_wishlists')) {
                                dir('plugin_wishlists') {
                                    bat 'npm install'
                                    bat 'npm run compile:scss'
                                    bat 'npm run compile:js'
                                }
                            }
							if(params.cartridgepath.contains('plugin_datadownload')) {
                                dir('plugin_datadownload') {
                                    bat 'npm install'
                                }
                            }
							if(params.cartridgepath.contains('plugin_newsletter')) {
                                dir('plugin_newsletter') {
                                    bat 'npm install'
                                    bat 'npm run compile:js'
                                }
                            }
							if(params.cartridgepath.contains('plugin_cartridge_merge')) {
                                dir('plugin_cartridge_merge') {
                                    bat 'npm install'
                                    bat 'npm run compile:scss'
                                    bat 'npm run compile:js'
                                }
                            }
							
                        }   
                    }  
                }
				stage('buildlink') {
                    steps {
                        script {
							if(params.cartridgepath.contains('link_paypal')) {
                                dir('link_paypal') {
                                    bat 'npm install'
                                    bat 'npm run compile:scss'
                                    bat 'npm run compile:js'
                                }
                            }
                        }   
                    }  
                }
                stage('buildcustom') {
                    steps {
                        script {
							if(params.cartridgepath.contains('app_custom_core')) {
                                dir('app_custom_core') {
                                    bat 'npm install'
                                    bat 'npm run compile:scss'
                                    bat 'npm run compile:js'
                                }
                            }
                        }   
                    }  
                }
            }
            
        }
        stage('Deploycode') {
            steps {
                osfBuilderSuiteForSFCCDeploy(
                    hostname: "${params.hostname}",
                    tfCredentialsId: '',
                    ocCredentialsId: "${params.ocCredentialsId}",
                    ocVersion: "${params.ocVersion}",
                    buildVersion: "${params.buildVersion}",
                    sourcePaths: [[sourcePath: 'storefront-reference-architecture/cartridges'], [sourcePath: 'plugin-applepay/cartridges'], [sourcePath: 'plugin_productcompare/cartridges'], [sourcePath: 'plugin_sitemap/cartridges'], [sourcePath: 'plugin_instorepickup/cartridges'], [sourcePath: 'lib_productlist/cartridges'], [sourcePath: 'plugin_giftregistry/cartridges'], [sourcePath: 'plugin_wishlists/cartridges'], [sourcePath: 'plugin_datadownload/cartridges'], [sourcePath: 'plugin_cartridge_merge/cartridges']],
                    activateBuild: "${params.activateBuild}",
                    createBuildInfoCartridge: "${params.createBuildInfoCartridge}",
                    tempDirectory: "${params.tempDirectory}"
                )
            }
        }
    }
   post {
      always {
        // One or more steps need to be included within each condition's block.
      }
      unstable {
        // One or more steps need to be included within each condition's block.
      }
      notBuilt {
        // One or more steps need to be included within each condition's block.
      }
      cleanup {
        // One or more steps need to be included within each condition's block.
      }
      regression {
        // One or more steps need to be included within each condition's block.
      }
      aborted {
        // One or more steps need to be included within each condition's block.
      }
      success {
        // One or more steps need to be included within each condition's block.
      }
      failure {
        // One or more steps need to be included within each condition's block.
      }
      unsuccessful {
        // One or more steps need to be included within each condition's block.
      }
      fixed {
        // One or more steps need to be included within each condition's block.
      }
      changed {
        // One or more steps need to be included within each condition's block.
      }
    }
}